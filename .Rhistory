#' Of all the features created using fcreate(), it is possible that some of the features can be multi-collinear with each other. So it is a good practice to eliminate such columns before passing the features to a machine learning model. This function eliminates all columns that have VIF that is greater than the threshold provided.
#' @param in_frame A dataframe with feature to be tested for multi-collinearity
#' @param thresh A cut-off for VIF value. Defaulted to 10
#' @param trace A flag which when true, prints results after each iteration. Defaulted to TRUE
#' @return A data frame with all the multi-collinear features eliminated
#' @export
#' @usage vif_func(in_frame, thresh, trace)
vif_func<-function(in_frame,thresh=10,trace=T)
{
# library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
# print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
vif_init_df <- data.frame(vif_init)
vif_init <- as.matrix(vif_init[vif_init_df$X2 != Inf,])
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1]]
if(vif_max < thresh){
if(trace==T){ #print output of each iteration
cat(paste('All variables have VIF < ', thresh,', max VIF ',round(vif_max,2), sep=''),'\n\n')
}
# return(var_names)
}else{
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
while(vif_max >= thresh){
# print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
# return(names(in_dat))
return (in_dat)
}
}
library(FeatureCreation)
scaled_df <- read.csv("~/scaled_df.csv", row.names=1)
View(scaled_df)
fcreated <- scaled_df
fselect(fcreated)
fselected <- fselect(fcreated)
View(fselected)
fcreated <- fcreate(scaled_df, "dvcol", 1)
fselected <- fselect(fcreated)
# require(data.table)
w<-data.table(Columnnames=colnames(fcreated))
w$newcolumnnames<-row.names(w)
w$newcolumnnames<-paste0("V",w$newcolumnnames)
colnames(fcreated)<-w$newcolumnnames
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
in_frame = fcreated
thresh=10
trace=TRUE
# library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
# print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
for(val in var_names){
print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
View(fcreated)
lm(form_in, data = in_frame)
View(in_frame)
anyNA(in_frame)
anyNA(in_frame$V1)
anyNA(in_frame$V2)
fcreated <- fcreate(scaled_df)
fcreated <- fcreate(scaled_df, "dvcol")
anyNA(fcreated)
in_frame = fcreated
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
fcreated[is.na(fcreated)] <- 0
is.na(fcreated)<-sapply(fcreated, is.infinite)
fcreated[is.na(fcreated)]<-0
is.na(fcreated)<-sapply(fcreated, is.nan)
fcreated[is.na(fcreated)]<-0
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
anyNA(fcreated)
in_frame = fcreated
# library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
# require(data.table)
w<-data.table(Columnnames=colnames(fcreated))
w$newcolumnnames<-row.names(w)
w$newcolumnnames<-paste0("V",w$newcolumnnames)
colnames(fcreated)<-w$newcolumnnames
fcreated[is.na(fcreated)] <- 0
is.na(fcreated)<-sapply(fcreated, is.infinite)
fcreated[is.na(fcreated)]<-0
is.na(fcreated)<-sapply(fcreated, is.nan)
fcreated[is.na(fcreated)]<-0
in_frame = fcreated
# library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
vif_init_df <- data.frame(vif_init)
vif_init <- as.matrix(vif_init[vif_init_df$X2 != Inf,])
vif_init
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
vif_max
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1]]
if(vif_max < thresh){
if(trace==T){ #print output of each iteration
cat(paste('All variables have VIF < ', thresh,', max VIF ',round(vif_max,2), sep=''),'\n\n')
}
# return(var_names)
}else{
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
while(vif_max >= thresh){
# print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
# return(names(in_dat))
return (in_dat)
}
vif_max < thresh
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
while(vif_max >= thresh){
# print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
vif_max >= thresh
vif_max < thresh
vif_max
max(as.numeric(vif_init[,2]), na.rm = TRUE)
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1]]
vif_max < thresh
in_frame <- fcreated
# library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
# print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
vif_init_df <- data.frame(vif_init)
vif_init <- as.matrix(vif_init[vif_init_df$X2 != Inf,])
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1]]
vif_max < thresh
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
while(vif_max >= thresh){
# print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
vif_max >= thresh
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1]]
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
# print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
while(vif_max >= thresh){
print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1]]
in_frame <- fcreated
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
# print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
in_frame <- fcreated
f(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
vif_init_df <- data.frame(vif_init)
vif_init <- as.matrix(vif_init[vif_init_df$X2 != Inf,])
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame[,colnames(in_frame) %in% vif_init[,1]]
in_frame[,colnames(in_frame) %in% vif_init[,1], with=F]
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1], with=F]
vif_max < thresh
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
while(vif_max >= thresh){
print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
scaled_df <- read.csv("~/scaled_df.csv", row.names=1)
View(scaled_df)
library(FeatureCreation)
fcreated <- fcreate(fcreated, "dvcol")
fcreated <- fcreate(scaled_df, "dvcol")
# require(data.table)
w<-data.table(Columnnames=colnames(fcreated))
require(data.table)
# require(data.table)
w<-data.table(Columnnames=colnames(fcreated))
w$newcolumnnames<-row.names(w)
w$newcolumnnames<-paste0("V",w$newcolumnnames)
colnames(fcreated)<-w$newcolumnnames
fcreated[is.na(fcreated)] <- 0
is.na(fcreated)<-sapply(fcreated, is.infinite)
fcreated[is.na(fcreated)]<-0
is.na(fcreated)<-sapply(fcreated, is.nan)
fcreated[is.na(fcreated)]<-0
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
if (is.null(f_selected))
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
#' Calculate variance inflation factor (VIF) from the result and lm() and use that to eliminate the columns with high VIF
#'
#' Of all the features created using fcreate(), it is possible that some of the features can be multi-collinear with each other. So it is a good practice to eliminate such columns before passing the features to a machine learning model. This function eliminates all columns that have VIF that is greater than the threshold provided.
#' @param in_frame A dataframe with feature to be tested for multi-collinearity
#' @param thresh A cut-off for VIF value. Defaulted to 10
#' @param trace A flag which when true, prints results after each iteration. Defaulted to TRUE
#' @return A data frame with all the multi-collinear features eliminated
#' @export
#' @usage vif_func(in_frame, thresh, trace)
vif_func<-function(in_frame,thresh=10,trace=T)
{
# library(fmsb)
if(any(!'data.frame' %in% class(in_frame))) in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- colnames(in_frame)
for(val in var_names){
# print(val)
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame))))
}
vif_init_df <- data.frame(vif_init)
vif_init <- as.matrix(vif_init[vif_init_df$X2 != Inf,])
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
in_frame <- in_frame[,colnames(in_frame) %in% vif_init[,1], with=F]
if(vif_max < thresh){
if(trace==T){ #print output of each iteration
cat(paste('All variables have VIF < ', thresh,', max VIF ',round(vif_max,2), sep=''),'\n\n')
}
# return(var_names)
}else{
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
i=1
while(vif_max >= thresh){
# print(i)
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) {break}
if(trace==T){ #print output of each iteration
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
cat(length(colnames(in_dat)) - 1, " variables left to check for multi-collinearity\n")
flush.console()
}
in_dat<-data.table(in_dat)[,!names(in_dat) %in% vif_vals[max_row,1], with=F]
i = i + 1
}
# return(names(in_dat))
return (in_dat)
}
}
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
library(FeatureCreation)
library(FeatureCreation)
scaled_df <- read.csv("~/scaled_df.csv", row.names=1)
View(scaled_df)
fselected <- fselect(scaled_df)
fcreated <- scaled_df
# require(data.table)
w<-data.table(Columnnames=colnames(fcreated))
w$newcolumnnames<-row.names(w)
w$newcolumnnames<-paste0("V",w$newcolumnnames)
colnames(fcreated)<-w$newcolumnnames
fcreated[is.na(fcreated)] <- 0
is.na(fcreated)<-sapply(fcreated, is.infinite)
fcreated[is.na(fcreated)]<-0
is.na(fcreated)<-sapply(fcreated, is.nan)
fcreated[is.na(fcreated)]<-0
f_selected <- vif_func(in_frame = fcreated, thresh=10, trace=TRUE)
library(FeatureCreation)
fselected <- fselect(scaled_df)
fcreated <- fcreate(scaled_df, "dvcol", 1)
fselected <- fselect(fcreated)
library(FeatureCreation)
library(FeatureCreation)
library(FeatureCreation)
library(FeatureCreation)
devtools::check()
library(h2o)
?h2o::h2o.automl
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
devtools::check()
library(FeatureCreation)
library(FeatureCreation)
devtools::check()
